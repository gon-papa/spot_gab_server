[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "TimedRotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlmodel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Relationship",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Relationship",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "dictConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "TestAppConfig",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "TestAppConfig",
        "importPath": "app.db.db",
        "description": "app.db.db",
        "isExtraImport": true,
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "update_injector",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "isExtraImport": true,
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "SignUpUser",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "SignUpUser",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "isExtraImport": true,
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "app.resource.model.email_verification",
        "description": "app.resource.model.email_verification",
        "isExtraImport": true,
        "detail": "app.resource.model.email_verification",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "app.resource.model.email_verification",
        "description": "app.resource.model.email_verification",
        "isExtraImport": true,
        "detail": "app.resource.model.email_verification",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "app.resource.model.email_verification",
        "description": "app.resource.model.email_verification",
        "isExtraImport": true,
        "detail": "app.resource.model.email_verification",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "app.resource.model.email_verification",
        "description": "app.resource.model.email_verification",
        "isExtraImport": true,
        "detail": "app.resource.model.email_verification",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "importPath": "app.resource.model.email_verification",
        "description": "app.resource.model.email_verification",
        "isExtraImport": true,
        "detail": "app.resource.model.email_verification",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlmodel.ext.asyncio.session",
        "description": "sqlmodel.ext.asyncio.session",
        "isExtraImport": true,
        "detail": "sqlmodel.ext.asyncio.session",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_scoped_session",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "injector",
        "description": "injector",
        "isExtraImport": true,
        "detail": "injector",
        "documentation": {}
    },
    {
        "label": "provider",
        "importPath": "injector",
        "description": "injector",
        "isExtraImport": true,
        "detail": "injector",
        "documentation": {}
    },
    {
        "label": "singleton",
        "importPath": "injector",
        "description": "injector",
        "isExtraImport": true,
        "detail": "injector",
        "documentation": {}
    },
    {
        "label": "Injector",
        "importPath": "injector",
        "description": "injector",
        "isExtraImport": true,
        "detail": "injector",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "injector",
        "description": "injector",
        "isExtraImport": true,
        "detail": "injector",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "injector",
        "description": "injector",
        "isExtraImport": true,
        "detail": "injector",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "common_header",
        "importPath": "app.resource.middleware.header",
        "description": "app.resource.middleware.header",
        "isExtraImport": true,
        "detail": "app.resource.middleware.header",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "app.resource.service.auth_service",
        "description": "app.resource.service.auth_service",
        "isExtraImport": true,
        "detail": "app.resource.service.auth_service",
        "documentation": {}
    },
    {
        "label": "SignUpRequest",
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "isExtraImport": true,
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "EmailExistsRequest",
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "isExtraImport": true,
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "IdAccountExistsRequest",
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "isExtraImport": true,
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "RefreshTokenRequest",
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "isExtraImport": true,
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "SignUpRequest",
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "isExtraImport": true,
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "SignUpRequest",
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "isExtraImport": true,
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "EmailExistsResponse",
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "isExtraImport": true,
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "IdAccountExistsResponse",
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "isExtraImport": true,
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "SignUpResponse",
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "isExtraImport": true,
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "SignInResponse",
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "isExtraImport": true,
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "ErrorJsonResponse",
        "importPath": "app.resource.response.error_response",
        "description": "app.resource.response.error_response",
        "isExtraImport": true,
        "detail": "app.resource.response.error_response",
        "documentation": {}
    },
    {
        "label": "ErrorJsonResponse",
        "importPath": "app.resource.response.error_response",
        "description": "app.resource.response.error_response",
        "isExtraImport": true,
        "detail": "app.resource.response.error_response",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "app.resource.response.json_response",
        "description": "app.resource.response.json_response",
        "isExtraImport": true,
        "detail": "app.resource.response.json_response",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "app.resource.response.json_response",
        "description": "app.resource.response.json_response",
        "isExtraImport": true,
        "detail": "app.resource.response.json_response",
        "documentation": {}
    },
    {
        "label": "get_current_active_user",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_expire_at",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "crate_user_claim",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "isExtraImport": true,
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "LOGGING_CONFIG",
        "importPath": "app.config.logging_config",
        "description": "app.config.logging_config",
        "isExtraImport": true,
        "detail": "app.config.logging_config",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.app",
        "description": "app.app",
        "isExtraImport": true,
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.app",
        "description": "app.app",
        "isExtraImport": true,
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "CustomValidator",
        "importPath": "app.resource.request.common_validate",
        "description": "app.resource.request.common_validate",
        "isExtraImport": true,
        "detail": "app.resource.request.common_validate",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "EmailVerificationRepository",
        "importPath": "app.resource.repository.email_varification_repository",
        "description": "app.resource.repository.email_varification_repository",
        "isExtraImport": true,
        "detail": "app.resource.repository.email_varification_repository",
        "documentation": {}
    },
    {
        "label": "EmailVerificationRepository",
        "importPath": "app.resource.repository.email_varification_repository",
        "description": "app.resource.repository.email_varification_repository",
        "isExtraImport": true,
        "detail": "app.resource.repository.email_varification_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.resource.repository.user_repository",
        "description": "app.resource.repository.user_repository",
        "isExtraImport": true,
        "detail": "app.resource.repository.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.resource.repository.user_repository",
        "description": "app.resource.repository.user_repository",
        "isExtraImport": true,
        "detail": "app.resource.repository.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.resource.repository.user_repository",
        "description": "app.resource.repository.user_repository",
        "isExtraImport": true,
        "detail": "app.resource.repository.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.resource.repository.user_repository",
        "description": "app.resource.repository.user_repository",
        "isExtraImport": true,
        "detail": "app.resource.repository.user_repository",
        "documentation": {}
    },
    {
        "label": "VerifyEmail",
        "importPath": "app.resource.util.mailer.templetes.verify_email",
        "description": "app.resource.util.mailer.templetes.verify_email",
        "isExtraImport": true,
        "detail": "app.resource.util.mailer.templetes.verify_email",
        "documentation": {}
    },
    {
        "label": "Mailer",
        "importPath": "app.resource.util.mailer.mailer",
        "description": "app.resource.util.mailer.mailer",
        "isExtraImport": true,
        "detail": "app.resource.util.mailer.mailer",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "BaseTempleteInterface",
        "importPath": "app.resource.util.mailer.templetes.base_template",
        "description": "app.resource.util.mailer.templetes.base_template",
        "isExtraImport": true,
        "detail": "app.resource.util.mailer.templetes.base_template",
        "documentation": {}
    },
    {
        "label": "FastMail",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "MessageSchema",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "ConnectionConfig",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "app.resource.controller.auth_controller",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.resource.controller.auth_controller",
        "description": "app.resource.controller.auth_controller",
        "detail": "app.resource.controller.auth_controller",
        "documentation": {}
    },
    {
        "label": "EnhancedTracebackMiddleware",
        "importPath": "app.resource.middleware.handler",
        "description": "app.resource.middleware.handler",
        "isExtraImport": true,
        "detail": "app.resource.middleware.handler",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.resource.controller",
        "description": "app.resource.controller",
        "isExtraImport": true,
        "detail": "app.resource.controller",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "pytest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest_asyncio",
        "description": "pytest_asyncio",
        "detail": "pytest_asyncio",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "pytest_mock",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest_mock",
        "description": "pytest_mock",
        "detail": "pytest_mock",
        "documentation": {}
    },
    {
        "label": "log_directory",
        "kind": 5,
        "importPath": "app.config.logging_config",
        "description": "app.config.logging_config",
        "peekOfCode": "log_directory = \"logs\"\nif not os.path.exists(log_directory):\n    os.makedirs(log_directory)\n# ロギング設定\nLOGGING_CONFIG = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'default': {\n            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',",
        "detail": "app.config.logging_config",
        "documentation": {}
    },
    {
        "label": "LOGGING_CONFIG",
        "kind": 5,
        "importPath": "app.config.logging_config",
        "description": "app.config.logging_config",
        "peekOfCode": "LOGGING_CONFIG = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'default': {\n            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        },\n    },\n    'handlers': {\n        'access_log': {",
        "detail": "app.config.logging_config",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.db.migration.versions.770998b477ca_create_email_verifications_1_on_1_change",
        "description": "app.db.migration.versions.770998b477ca_create_email_verifications_1_on_1_change",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_unique_constraint(None, 'email_verifications', ['user_id'])\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'email_verifications', type_='unique')\n    # ### end Alembic commands ###",
        "detail": "app.db.migration.versions.770998b477ca_create_email_verifications_1_on_1_change",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.db.migration.versions.770998b477ca_create_email_verifications_1_on_1_change",
        "description": "app.db.migration.versions.770998b477ca_create_email_verifications_1_on_1_change",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'email_verifications', type_='unique')\n    # ### end Alembic commands ###",
        "detail": "app.db.migration.versions.770998b477ca_create_email_verifications_1_on_1_change",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.db.migration.versions.80bbbe1d7643_create_email_verifications",
        "description": "app.db.migration.versions.80bbbe1d7643_create_email_verifications",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('email_verifications',\n    sa.Column('id', sa.Integer(), nullable=False, comment='ID'),\n    sa.Column('user_id', sa.Integer(), nullable=False, comment='ユーザーID'),\n    sa.Column('email_verified_at', sa.DateTime(), nullable=True, comment='メール認証日時'),\n    sa.Column('email_verify_token', sa.String(length=100), nullable=True, comment='メール認証トークン'),\n    sa.Column('email_verified_expired_at', sa.DateTime(), nullable=True, comment='メール認証有効期限'),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.Column('updated_at', sa.DateTime(), nullable=True),",
        "detail": "app.db.migration.versions.80bbbe1d7643_create_email_verifications",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.db.migration.versions.80bbbe1d7643_create_email_verifications",
        "description": "app.db.migration.versions.80bbbe1d7643_create_email_verifications",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'email_verified')\n    op.drop_table('email_verifications')\n    # ### end Alembic commands ###",
        "detail": "app.db.migration.versions.80bbbe1d7643_create_email_verifications",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.db.migration.versions.aabe030448a4_users_create",
        "description": "app.db.migration.versions.aabe030448a4_users_create",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False, comment='ID'),\n    sa.Column('uuid', sa.String(length=36), nullable=False, comment='UUID'),\n    sa.Column('account_name', sa.String(length=100), nullable=False, comment='アカウント名'),\n    sa.Column('id_account', sa.String(length=100), nullable=False, comment='アカウントID'),\n    sa.Column('email', sa.String(length=100), nullable=False, comment='メールアドレス'),\n    sa.Column('hashed_password', sa.String(length=100), nullable=False, comment='パスワード'),\n    sa.Column('is_active', sa.Boolean(), nullable=False, comment='アクティブフラグ True:ログイン中 False:ログアウト中'),",
        "detail": "app.db.migration.versions.aabe030448a4_users_create",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.db.migration.versions.aabe030448a4_users_create",
        "description": "app.db.migration.versions.aabe030448a4_users_create",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "app.db.migration.versions.aabe030448a4_users_create",
        "documentation": {}
    },
    {
        "label": "render_item",
        "kind": 2,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "def render_item(type_, obj, autogen_context):\n    \"\"\"Apply custom rendering for selected items.\"\"\"\n    if type_ == \"type\" and isinstance(\n        obj, sqlalchemy_utils.types.uuid.UUIDType\n    ):\n        autogen_context.imports.add(\"import sqlalchemy_utils\")\n        autogen_context.imports.add(\"import uuid\")\n        return \"sqlalchemy_utils.types.uuid.UUIDType(binary=False)\\\n            , default=uuid.uuid4\"\n    return False",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "db_connection",
        "kind": 5,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "db_connection = get_di_class(DatabaseConnection)\nASYNC_DB_URL = db_connection.get_migration_url()\n# 実行時にコンソールに表示\nprint(ASYNC_DB_URL)\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n# alembic.iniの設定を上書き\nconfig.set_main_option('sqlalchemy.url', ASYNC_DB_URL)\n# Interpret the config file for Python logging.",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "ASYNC_DB_URL",
        "kind": 5,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "ASYNC_DB_URL = db_connection.get_migration_url()\n# 実行時にコンソールに表示\nprint(ASYNC_DB_URL)\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n# alembic.iniの設定を上書き\nconfig.set_main_option('sqlalchemy.url', ASYNC_DB_URL)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "config = context.config\n# alembic.iniの設定を上書き\nconfig.set_main_option('sqlalchemy.url', ASYNC_DB_URL)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "app.db.migration.env",
        "description": "app.db.migration.env",
        "peekOfCode": "target_metadata = SQLModel.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef render_item(type_, obj, autogen_context):\n    \"\"\"Apply custom rendering for selected items.\"\"\"\n    if type_ == \"type\" and isinstance(\n        obj, sqlalchemy_utils.types.uuid.UUIDType\n    ):",
        "detail": "app.db.migration.env",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "app.db.db",
        "description": "app.db.db",
        "peekOfCode": "class DatabaseConnection:\n    def __init__(self, connection_url: str, migration_url: str, option: dict = {}):\n        self.connection_url = connection_url\n        self.migration_url = migration_url\n        self.option = option\n        self.engine = self.get_async_engine()\n        self.session = self.get_session(self.engine)\n    @asynccontextmanager\n    async def get_db(self):\n        async with self.session() as session:",
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "ConfigInterface",
        "kind": 6,
        "importPath": "app.db.db",
        "description": "app.db.db",
        "peekOfCode": "class ConfigInterface(ABC):\n    @abstractmethod\n    def db_url(self) -> str:\n        pass\n    @abstractmethod\n    def migration_url(self) -> str:\n        pass\n    @abstractmethod\n    def get_option(self) -> dict:\n        pass",
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "app.db.db",
        "description": "app.db.db",
        "peekOfCode": "class AppConfig(Module, ConfigInterface):\n    @singleton\n    @provider\n    def provide_database_connection(self) -> DatabaseConnection:\n        return DatabaseConnection(self.db_url(), self.migration_url(), self.get_option())\n    def db_url(self) -> str:\n        dialect = os.getenv(\"DB_DIALECT\")\n        driver = os.getenv(\"DB_DRIVER\")\n        username = os.getenv(\"DB_USER\")\n        password = os.getenv(\"DB_PASS\")",
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "TestAppConfig",
        "kind": 6,
        "importPath": "app.db.db",
        "description": "app.db.db",
        "peekOfCode": "class TestAppConfig(Module, ConfigInterface):\n    @singleton\n    @provider\n    def provide_database_connection(self) -> DatabaseConnection:\n        return DatabaseConnection(self.db_url(), self.migration_url(), self.get_option())\n    def db_url(self) -> str:\n        return f\"sqlite+aiosqlite:///./test.db\"\n    def migration_url(self) -> str:\n        return f\"sqlite+aiosqlite:///./test.db\"\n    def get_option(self) -> dict:",
        "detail": "app.db.db",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.resource.controller.auth_controller",
        "description": "app.resource.controller.auth_controller",
        "peekOfCode": "router = APIRouter()\nload_dotenv()\n@router.post(\n    '/sign-up',\n    tags=[\"auth\"],\n    response_model=SignUpResponse,\n    name=\"サインアップ\",\n    description=\"サインアップ\",\n    operation_id=\"sign_up\",\n    responses = {",
        "detail": "app.resource.controller.auth_controller",
        "documentation": {}
    },
    {
        "label": "get_di_class",
        "kind": 2,
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "peekOfCode": "def get_di_class(_class):\n    return di.get(_class)",
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "di",
        "kind": 5,
        "importPath": "app.resource.depends.depends",
        "description": "app.resource.depends.depends",
        "peekOfCode": "di = Injector([AppConfig()])\nasync def update_injector(_class):\n    global di\n    di = Injector([_class])\n@inject\ndef get_di_class(_class):\n    return di.get(_class)",
        "detail": "app.resource.depends.depends",
        "documentation": {}
    },
    {
        "label": "EnhancedTracebackMiddleware",
        "kind": 6,
        "importPath": "app.resource.middleware.handler",
        "description": "app.resource.middleware.handler",
        "peekOfCode": "class EnhancedTracebackMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        try:\n            response = await call_next(request)\n            return response\n        except Exception as exc:\n            logger.error(f\"Unhandled exception: {exc}\")\n            tb_lines = traceback.format_exception(etype=type(exc), value=exc, tb=exc.__traceback__)\n            detailed_tb = \"\".join(tb_lines[::-1])  # スタックトレースを逆順に\n            # 本番環境ではスタックトレースをレスポンスに含めない",
        "detail": "app.resource.middleware.handler",
        "documentation": {}
    },
    {
        "label": "app_env",
        "kind": 5,
        "importPath": "app.resource.middleware.handler",
        "description": "app.resource.middleware.handler",
        "peekOfCode": "app_env = os.getenv(\"APP_ENV\", \"development\")\ndictConfig(LOGGING_CONFIG)\nlogger = logging.getLogger(\"app.exception\")\n# カスタムエラーハンドラの追加\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    error = ErrorJsonResponse(status=exc.status_code, error=\"http-error\", message=exc.detail)\n    return JSONResponse(status_code=exc.status_code, content=error.model_dump())\nclass EnhancedTracebackMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):",
        "detail": "app.resource.middleware.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.resource.middleware.handler",
        "description": "app.resource.middleware.handler",
        "peekOfCode": "logger = logging.getLogger(\"app.exception\")\n# カスタムエラーハンドラの追加\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    error = ErrorJsonResponse(status=exc.status_code, error=\"http-error\", message=exc.detail)\n    return JSONResponse(status_code=exc.status_code, content=error.model_dump())\nclass EnhancedTracebackMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        try:\n            response = await call_next(request)",
        "detail": "app.resource.middleware.handler",
        "documentation": {}
    },
    {
        "label": "CommonHeader",
        "kind": 6,
        "importPath": "app.resource.middleware.header",
        "description": "app.resource.middleware.header",
        "peekOfCode": "class CommonHeader(BaseModel):\n    user_agent: str = Field(\n        ...,\n        title=\"アカウント名\",\n        description=\"アカウント名\",\n    )\n    x_language: str\ndef common_header(\n    x_language: str = Header(\n        ...,",
        "detail": "app.resource.middleware.header",
        "documentation": {}
    },
    {
        "label": "common_header",
        "kind": 2,
        "importPath": "app.resource.middleware.header",
        "description": "app.resource.middleware.header",
        "peekOfCode": "def common_header(\n    x_language: str = Header(\n        ...,\n        alias=\"X-Language\",\n        description=\"言語[ja,en]\",\n        openapi_examples={\n            \"ja\": {\n                \"summary\": \"Japanese\",\n                \"value\": \"ja\"\n            },",
        "detail": "app.resource.middleware.header",
        "documentation": {}
    },
    {
        "label": "EmailVerification",
        "kind": 6,
        "importPath": "app.resource.model.email_verification",
        "description": "app.resource.model.email_verification",
        "peekOfCode": "class EmailVerification(SQLModel, table=True):\n    __tablename__ = \"email_verifications\"\n    id: Optional[int] = Field(default=None, sa_column=Column(Integer, primary_key=True, comment=\"ID\"))\n    user_id: int = Field(default=None, sa_column=Column(Integer, ForeignKey(\"users.id\"), nullable=False, unique=True, comment=\"ユーザーID\"))\n    email_verified_at: Optional[datetime] = Field(sa_column=Column(DateTime, nullable=True, comment=\"メール認証日時\"))\n    email_verify_token: str = Field(sa_column=Column(String(100), nullable=True, comment=\"メール認証トークン\"))\n    email_verified_expired_at: Optional[datetime] = Field(sa_column=Column(DateTime, nullable=True, comment=\"メール認証有効期限\"))\n    created_at: datetime = Field(default_factory=datetime.utcnow, sa_column=Column(DateTime, nullable=True, default=datetime.utcnow))\n    updated_at: datetime = Field(default_factory=datetime.utcnow, sa_column=Column(DateTime, nullable=True, onupdate=datetime.utcnow))\n    # リレーション",
        "detail": "app.resource.model.email_verification",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "peekOfCode": "class Users(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, sa_column=Column(Integer, primary_key=True, comment=\"ID\"))\n    uuid: str = Field(default_factory=lambda: str(uuid4()), sa_column=Column(String(36), nullable=False, unique=True, comment=\"UUID\"))\n    account_name: str = Field(sa_column=Column(String(100), nullable=False, comment=\"アカウント名\"))\n    id_account: str = Field(sa_column=Column(String(100), nullable=False, unique=True, comment=\"アカウントID\"))\n    email: str = Field(sa_column=Column(String(100), nullable=False, unique=True, comment=\"メールアドレス\"))\n    hashed_password: str = Field(sa_column=Column(String(100), nullable=False, comment=\"パスワード\"))\n    is_active: bool = Field(sa_column=Column(Boolean, nullable=False, default=False, comment=\"アクティブフラグ True:ログイン中 False:ログアウト中\"))\n    birth_date: date = Field(sa_column=Column(Date, nullable=False, comment=\"生年月日\"))\n    other_user_invitation_code: str = Field(default_factory=lambda: str(uuid4()), sa_column=Column(String(36), nullable=True, comment=\"他ユーザー招待コード\"))",
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "UserRead",
        "kind": 6,
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "peekOfCode": "class UserRead(SQLModel):\n    id: int\n    uuid: str\n    account_name: str\n    id_account: str\n    email: str\n    is_active: bool\n    birth_date: date\n    other_user_invitation_code: Optional[str] = None\n    email_verified: bool",
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "SignUpUser",
        "kind": 6,
        "importPath": "app.resource.model.users",
        "description": "app.resource.model.users",
        "peekOfCode": "class SignUpUser(SQLModel):\n    id: int\n    uuid: str\n    account_name: str\n    id_account: str\n    email: str\n    birth_date: date\n    other_user_invitation_code: Optional[str] = None\n    token: Optional[str] = None\n    refresh_token: str",
        "detail": "app.resource.model.users",
        "documentation": {}
    },
    {
        "label": "EmailVerificationRepository",
        "kind": 6,
        "importPath": "app.resource.repository.email_varification_repository",
        "description": "app.resource.repository.email_varification_repository",
        "peekOfCode": "class EmailVerificationRepository:\n    def __init__(self) -> None:\n        self.db = get_di_class(DatabaseConnection)\n    # email_verify_tokenからemail_verification取得\n    async def get_email_verification_by_token(self, token: str) -> EmailVerification:\n        async with self.db.get_db() as session:\n            result = await session.exec(select(EmailVerification).filter(EmailVerification.email_verify_token == token))\n            email_verification = result.scalars().first()\n            return email_verification\n    # user_idからemail_verification取得",
        "detail": "app.resource.repository.email_varification_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "app.resource.repository.user_repository",
        "description": "app.resource.repository.user_repository",
        "peekOfCode": "class UserRepository:\n    def __init__(self) -> None:\n        self.db = get_di_class(DatabaseConnection)\n    # ユーザー作成\n    async def create_user(self, user:Users) -> Users:\n        async with self.db.get_db() as session:\n            try: \n                session.add(user)\n                await session.commit()\n                await session.refresh(user)",
        "detail": "app.resource.repository.user_repository",
        "documentation": {}
    },
    {
        "label": "SignUpRequest",
        "kind": 6,
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "peekOfCode": "class SignUpRequest(BaseModel):\n    account_name: str = Field(\n        ...,\n        title=\"アカウント名\",\n        description=\"アカウント名\",\n    )\n    id_account: str = Field(\n        ...,\n        title=\"アカウントID\",\n        description=\"アカウントID\",",
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "EmailExistsRequest",
        "kind": 6,
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "peekOfCode": "class EmailExistsRequest(BaseModel):\n    email: str = Field(\n        ...,\n        title=\"メールアドレス\",\n        description=\"メールアドレス\",\n    )\nclass IdAccountExistsRequest(BaseModel):\n    id_account: str = Field(\n        ...,\n        title=\"アカウントID\",",
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "IdAccountExistsRequest",
        "kind": 6,
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "peekOfCode": "class IdAccountExistsRequest(BaseModel):\n    id_account: str = Field(\n        ...,\n        title=\"アカウントID\",\n        description=\"アカウントID\",\n    )\nclass RefreshTokenRequest(BaseModel):\n    refresh_token: str = Field(\n        ...,\n        title=\"リフレッシュトークン\",",
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "RefreshTokenRequest",
        "kind": 6,
        "importPath": "app.resource.request.auth_request",
        "description": "app.resource.request.auth_request",
        "peekOfCode": "class RefreshTokenRequest(BaseModel):\n    refresh_token: str = Field(\n        ...,\n        title=\"リフレッシュトークン\",\n        description=\"リフレッシュトークン\",\n    )",
        "detail": "app.resource.request.auth_request",
        "documentation": {}
    },
    {
        "label": "CustomValidator",
        "kind": 6,
        "importPath": "app.resource.request.common_validate",
        "description": "app.resource.request.common_validate",
        "peekOfCode": "class CustomValidator:\n    @staticmethod\n    def email_validator(cls, value):\n        email_regex = r'^\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n        if not re.match(email_regex, value):\n            raise ValueError('メールアドレスが無効です。正しい形式で入力してください。')\n        return value\n    @staticmethod\n    def password_validator(cls, value):\n            if len(value) < 8:",
        "detail": "app.resource.request.common_validate",
        "documentation": {}
    },
    {
        "label": "EmailExistsResponse",
        "kind": 6,
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "peekOfCode": "class EmailExistsResponse(JsonResponse):\n    class EmailExistsResponseItem(BaseModel):\n        exists: bool = Field(None, description=\"存在確認結果\")\n    data: EmailExistsResponseItem = Field(None, description=\"存在確認結果\")\nclass IdAccountExistsResponse(JsonResponse):\n    class IdAccountExistsResponseItem(BaseModel):\n        exists: bool = Field(None, description=\"存在確認結果\")\n    data: IdAccountExistsResponseItem = Field(None, description=\"存在確認結果\")\nclass SignUpResponse(JsonResponse):\n    class SignUpResponseItem(BaseModel):",
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "IdAccountExistsResponse",
        "kind": 6,
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "peekOfCode": "class IdAccountExistsResponse(JsonResponse):\n    class IdAccountExistsResponseItem(BaseModel):\n        exists: bool = Field(None, description=\"存在確認結果\")\n    data: IdAccountExistsResponseItem = Field(None, description=\"存在確認結果\")\nclass SignUpResponse(JsonResponse):\n    class SignUpResponseItem(BaseModel):\n        user: SignUpUser = Field(None, description=\"サインアップユーザー情報\")\n    data: SignUpResponseItem = Field(None, description=\"サインアップユーザー情報\")\nclass SignInResponse(BaseModel):\n    access_token: str",
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "SignUpResponse",
        "kind": 6,
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "peekOfCode": "class SignUpResponse(JsonResponse):\n    class SignUpResponseItem(BaseModel):\n        user: SignUpUser = Field(None, description=\"サインアップユーザー情報\")\n    data: SignUpResponseItem = Field(None, description=\"サインアップユーザー情報\")\nclass SignInResponse(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"",
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "SignInResponse",
        "kind": 6,
        "importPath": "app.resource.response.auth_response",
        "description": "app.resource.response.auth_response",
        "peekOfCode": "class SignInResponse(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"",
        "detail": "app.resource.response.auth_response",
        "documentation": {}
    },
    {
        "label": "ErrorJsonResponse",
        "kind": 6,
        "importPath": "app.resource.response.error_response",
        "description": "app.resource.response.error_response",
        "peekOfCode": "class ErrorJsonResponse(BaseModel):\n    status: int = Field(500, description=\"ステータスコード\")\n    error: str = Field(\"Internal Server Error\", description=\"エラーメッセージ\")\n    message: str = Field(\"Internal Server Error\", description=\"エラーメッセージ\")",
        "detail": "app.resource.response.error_response",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "kind": 6,
        "importPath": "app.resource.response.json_response",
        "description": "app.resource.response.json_response",
        "peekOfCode": "class JsonResponse(BaseModel):\n    status: int = Field(200, description=\"ステータスコード\")\n    data: Any = Field(None, description=\"データ\")\n    message: Union[str,None] = Field(\"ok\", description=\"メッセージ\")",
        "detail": "app.resource.response.json_response",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "app.resource.service.auth_service",
        "description": "app.resource.service.auth_service",
        "peekOfCode": "class AuthService:\n    @inject\n    def __init__(self, repository: UserRepository, emailVerificationRepository: EmailVerificationRepository):\n        self.repository = repository\n        self.emailVerificationRepository = emailVerificationRepository        \n    # サインアップ\n    async def sign_up(self, request:SignUpRequest, bk: BackgroundTasks) -> SignUpUser:\n        is_email_exist = await self.email_exist(request.email)\n        is_id_account_exist = await self.id_account_exist(request.id_account)\n        if is_email_exist:",
        "detail": "app.resource.service.auth_service",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化\ndef get_password_hash(password)-> str:\n    return pwd_context.hash(password)\n# リフレッシュトークン作成\ndef create_refresh_token()-> str:\n    return secrets.token_urlsafe(64)\n# リフレッシュトークンの有効期限作成\ndef create_expire_at()-> datetime:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def get_password_hash(password)-> str:\n    return pwd_context.hash(password)\n# リフレッシュトークン作成\ndef create_refresh_token()-> str:\n    return secrets.token_urlsafe(64)\n# リフレッシュトークンの有効期限作成\ndef create_expire_at()-> datetime:\n    day = int(os.getenv('REFRESH_TOKEN_EXPIRE_DAY'))\n    create_expire_at = datetime.utcnow() + timedelta(days=day)\n    return create_expire_at",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def create_refresh_token()-> str:\n    return secrets.token_urlsafe(64)\n# リフレッシュトークンの有効期限作成\ndef create_expire_at()-> datetime:\n    day = int(os.getenv('REFRESH_TOKEN_EXPIRE_DAY'))\n    create_expire_at = datetime.utcnow() + timedelta(days=day)\n    return create_expire_at\n# 認証チェック\n# emailとpasswordが一致するユーザーを取得\nasync def authenticate_user(email: str, password: str)-> Union[Users, bool]:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_expire_at",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def create_expire_at()-> datetime:\n    day = int(os.getenv('REFRESH_TOKEN_EXPIRE_DAY'))\n    create_expire_at = datetime.utcnow() + timedelta(days=day)\n    return create_expire_at\n# 認証チェック\n# emailとpasswordが一致するユーザーを取得\nasync def authenticate_user(email: str, password: str)-> Union[Users, bool]:\n    repository = get_di_class(UserRepository)\n    user = await repository.get_user_by_email(email)\n    if user is None:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "crate_user_claim",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def crate_user_claim(user: Users)-> dict:\n    access_token_data = {\n        \"sub\": user.uuid, # 一意の識別子\n        \"aud\": \"user\", # role\n        \"exp\": datetime.utcnow() + timedelta(minutes=expired_minutes), # 有効期限\n    }\n    return access_token_data\n# アクセストークン作成\ndef create_access_token(data: dict):\n    to_encode = data.copy()",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    encoded_jwt = jwt.encode(to_encode, secret_key, algorithm=algorithm)\n    return encoded_jwt\n# アクセストークン解析\nasync def get_current_user(token: str = Depends(oauth2_scheme))-> Optional[Users]:\n    try:\n        payload = jwt.decode(token, secret_key, algorithms=[algorithm], audience=\"user\")\n        uuid: str = payload.get(\"sub\")\n        if uuid is None:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "credentials_exception",
        "kind": 2,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "def credentials_exception(e: Union[JWTError, None]):\n    logger.error(e)\n    raise HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n# ユーザー認証\nasync def get_current_active_user(current_user: Users = Depends(get_current_user))-> Users:\n    if not current_user.is_active:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "logger = logging.getLogger(\"app.exception\")\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"sign-in\")\nsecret_key = os.getenv('JWT_SECRET_KEY')\nalgorithm = \"HS256\"\nexpired_minutes = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n# パスワード比較\ndef verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"sign-in\")\nsecret_key = os.getenv('JWT_SECRET_KEY')\nalgorithm = \"HS256\"\nexpired_minutes = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n# パスワード比較\ndef verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化\ndef get_password_hash(password)-> str:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"sign-in\")\nsecret_key = os.getenv('JWT_SECRET_KEY')\nalgorithm = \"HS256\"\nexpired_minutes = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n# パスワード比較\ndef verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化\ndef get_password_hash(password)-> str:\n    return pwd_context.hash(password)",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "secret_key",
        "kind": 5,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "secret_key = os.getenv('JWT_SECRET_KEY')\nalgorithm = \"HS256\"\nexpired_minutes = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n# パスワード比較\ndef verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化\ndef get_password_hash(password)-> str:\n    return pwd_context.hash(password)\n# リフレッシュトークン作成",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "kind": 5,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "algorithm = \"HS256\"\nexpired_minutes = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n# パスワード比較\ndef verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化\ndef get_password_hash(password)-> str:\n    return pwd_context.hash(password)\n# リフレッシュトークン作成\ndef create_refresh_token()-> str:",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "expired_minutes",
        "kind": 5,
        "importPath": "app.resource.service_domain.auth_service_domain",
        "description": "app.resource.service_domain.auth_service_domain",
        "peekOfCode": "expired_minutes = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n# パスワード比較\ndef verify_password(plain_password, hashed_password)-> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n# パスワードのハッシュ化\ndef get_password_hash(password)-> str:\n    return pwd_context.hash(password)\n# リフレッシュトークン作成\ndef create_refresh_token()-> str:\n    return secrets.token_urlsafe(64)",
        "detail": "app.resource.service_domain.auth_service_domain",
        "documentation": {}
    },
    {
        "label": "BaseTempleteInterface",
        "kind": 6,
        "importPath": "app.resource.util.mailer.templetes.base_template",
        "description": "app.resource.util.mailer.templetes.base_template",
        "peekOfCode": "class BaseTempleteInterface(ABC):\n    @abstractmethod\n    def get_html(self, **kwargs: str) -> str:\n        pass",
        "detail": "app.resource.util.mailer.templetes.base_template",
        "documentation": {}
    },
    {
        "label": "VerifyEmail",
        "kind": 6,
        "importPath": "app.resource.util.mailer.templetes.verify_email",
        "description": "app.resource.util.mailer.templetes.verify_email",
        "peekOfCode": "class VerifyEmail(BaseTempleteInterface):\n    def get_html(self, verify_token: str, account_name: str, suppout_url) -> str:\n        return f\"\"\"\n        <!DOCTYPE html>\n        <html lang=\"ja\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>SpotGabへの招待</title>\n                <style>",
        "detail": "app.resource.util.mailer.templetes.verify_email",
        "documentation": {}
    },
    {
        "label": "Mailer",
        "kind": 6,
        "importPath": "app.resource.util.mailer.mailer",
        "description": "app.resource.util.mailer.mailer",
        "peekOfCode": "class Mailer:\n    def __init__(self):\n        self.conf = ConnectionConfig(\n            MAIL_USERNAME=os.getenv(\"MAIL_USERNAME\"),\n            MAIL_PASSWORD=os.getenv(\"MAIL_PASSWORD\"),\n            MAIL_FROM=os.getenv(\"MAIL_FROM\"),\n            MAIL_PORT=os.getenv(\"MAIL_PORT\"),\n            MAIL_SERVER=os.getenv(\"MAIL_SERVER\"),\n            MAIL_FROM_NAME=os.getenv(\"MAIL_FROM_NAME\"),\n            MAIL_STARTTLS=os.getenv(\"MAIL_STARTTLS\"),",
        "detail": "app.resource.util.mailer.mailer",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "app = FastAPI(\n    title=\"spot_gab_api\",\n    description=\"API for spot_gab_app\",\n    verion=\"0.1.0\",\n    servers=[\n        {\n            \"url\": \"http://localhost:8000\",\n            \"description\": \"Local server\"\n        }\n    ]",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = app\napp.include_router(auth_controller.router)\napp.add_middleware(EnhancedTracebackMiddleware)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "tests.feature.conftest",
        "description": "tests.feature.conftest",
        "peekOfCode": "BASE_URL = os.getenv(\"BASE_URL\")\n# クライアント取得\n@pytest_asyncio.fixture\nasync def async_client():\n    async with AsyncClient(app=app, base_url=BASE_URL) as client:\n        yield client\n# ヘッダー取得\n@pytest_asyncio.fixture\nasync def get_header()-> dict[str, str]:\n    return {",
        "detail": "tests.feature.conftest",
        "documentation": {}
    },
    {
        "label": "TestAuthController",
        "kind": 6,
        "importPath": "tests.feature.test_auth_controller",
        "description": "tests.feature.test_auth_controller",
        "peekOfCode": "class TestAuthController:\n    @pytest_asyncio.fixture\n    async def setup_user(self):\n        self.user = Users(\n            account_name=\"test\",\n            id_account=\"test\",\n            email=\"test@test.com\",\n            hashed_password=\"$2b$12$VUJv82tezCvUccA35HleFulwc4qYrz7BqFHIdK7yXQK0nEPyl2Cc.\", # password\n            birth_date=date(2000, 1, 1),\n            is_active=True,",
        "detail": "tests.feature.test_auth_controller",
        "documentation": {}
    }
]